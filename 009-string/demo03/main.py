#字符串的运算
#我们可以使用+运算符来实现字符串的拼接，可以使用*运算符来重复一个字符串的内容，
# 可以使用in和not in来判断一个字符串是否包含另外一个字符串，我们也可以用[]和[:]运算符从字符串取出某个字符或某些字符。




#------------------------------- 拼接和重复---------------------------------
s1 = 'hello' + ' ' + 'world'
print(s1)    # hello world
s2 = '!' * 3
print(s2)    # !!!


#------------------------------- 比较运算 ---------------------------------
# 需要强调一下的是，字符串的比较运算比较的是字符串的内容，
# Python中还有一个is运算符（身份运算符），如果用is来比较两个字符串，它比较的是两个变量对应的字符串是否在内存中相同的位置（内存地址），
#todo 这里对is的说明是有问题的额，应该不是内存地址，只要是同一个类型，且值相等应该就是true了
# 简单的说就是两个变量是否对应内存中的同一个字符串。

s1 = 'hello world'
s2 = 'hello world'
s3 = s2
print(s1 == s2, s2 == s3)    # True True
print(s1 is s2, s2 is s3)    # True True

#------------------------------- 成员运算  ---------------------------------
s1 = 'hello, world'
print('wo' in s1)    # True
s2 = 'goodbye'
print(s2 in s1)      # False

#------------------------------- 获取字符串长度 ---------------------------------
s = 'hello, world'
print(len(s))

#------------------------------- 索引和切片---------------------------------
# 如果希望从字符串中取出某个字符，我们可以对字符串进行索引运算，运算符是[n]，其中n是一个整数，假设字符串的长度为N，那么n可以是从0到N-1的整数，其中0是字符串中第一个字符的索引，而N-1是字符串中最后一个字符的索引，通常称之为正向索引；
# 在Python中，字符串的索引也可以是从-1到-N的整数，其中-1是最后一个字符的索引，而-N则是第一个字符的索引，通常称之为负向索引。
# 注意，因为字符串是不可变类型，所以不能通过索引运算修改字符串中的字符。

#0 -9
#1 -8
#2  -7
#3  -6
#4  -5
#5  -4
#6  -3
#7  -2
#8  -1


s = 'abc123456'
N = len(s)

# 获取第一个字符
print(s[0], s[-N])    # a a

# 获取最后一个字符
print(s[N-1], s[-1])  # 6 6

# 获取索引为2或-7的字符
print(s[2], s[-7])    # c c

# 获取索引为5和-4的字符
print(s[5], s[-4])    # 3 3



# 如果要从字符串中取出多个字符，我们可以对字符串进行切片，运算符是[i:j:k]，其中i是开始索引，索引对应的字符可以取到；j是结束索引，索引对应的字符不能取到；k是步长，默认值为1，
# 表示从前向后获取相邻字符的连续切片，所以:k部分可以省略。
# 假设字符串的长度为N，当k > 0时表示正向切片（从前向后获取字符），如果没有给出i和j的值，则i的默认值是0，j的默认值是N；

# 当k < 0时表示负向切片（从后向前获取字符），如果没有给出i和j的值，则i的默认值是-1，j的默认值是-N - 1。如果不理解，直接看下面的例子，记住第一个字符的索引是0或-N，最后一个字符的索引是N-1或-1就行了。


s = 'abc123456'

# i=2, j=5, k=1的正向切片操作
print(s[2:5])       # c12

# i=-7, j=-4, k=1的正向切片操作，可以将其转成 s[2:5]
print(s[-7:-4])     # c12

# i=1, j=-1, k=2的正向切片操作  s[1,8:2]
print(s[1:-1:2])    # b135

# i=7, j=1, k=-1的负向切片操作
print(s[7:1:-1])    # 54321c




























